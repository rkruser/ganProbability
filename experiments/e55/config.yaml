name: stage1
modules: [ProbData, DeepRegressorSize28Col3, RegressorTrain, MNISTSize28Cols1, RegressorTest, Analyzer]
#One for everything in otherPaths
otherTemplates: {
  generated: template
}
dependencies: [[], [], [0,1], [], [3, 1], [0,1,2,3,4]]
args: {
  # ProbData args
  sampleExpNum: 47, #TBD
  # DeepRegressor args
  embeddingModelExpNum: 53, #TBD
  embeddingModelInstance: 9,
  # Train args
  nRegressorEpochs: 25,
  cuda: True,
  checkpointEvery: 5
  # Test args
  # Analyzer args
}
## Note: at the moment: this must contain
# all the files needed for stage 2 as well
files: {
  submit: {'path': 'submit.sh',
         'parallelOpt': 'threadInvariant'},
  submit2: {'path': 'submit2.sh',
         'parallelOpt': 'threadInvariant'},
  netG: {'path': 'models/netG.pth',
      'parallelOpt': 'threadInvariant',
      'pathOpt': 'experimentRelative',
      'folder': 'generated'},
  netD: {'path': 'models/netD.pth',
      'parallelOpt': 'threadInvariant',
      'pathOpt': 'experimentRelative',
      'folder': 'generated'},
  lenet: {'path': 'models/lenet.pth',
          'parallelOpt': 'threadInvariant',
          'pathOpt': 'experimentRelative',
          'folder': 'generated'},
  lenetState: {'path': 'models/lenetState.pickle',
      'parallelOpt': 'threadInvariant',
      'pathOpt': 'experimentRelative',
      'folder': 'generated'},
  ganState: {'path': 'models/ganState.pickle',
      'parallelOpt': 'threadInvariant',
      'pathOpt': 'experimentRelative',
      'folder': 'generated'},
  regressorState: {'path': 'models/regressorState.pickle',
  'parallelOpt': 'threadInvariant',
  'pathOpt': 'experimentRelative',
  'folder': 'generated'},
  slurmOutFolder: 'logs/',
  samples: {'path': 'data/samples.mat',
            'parallelOpt': 'threadSpecific',
            'pathOpt': 'experimentRelative',
            'folder': 'generated'},
  netP: {'path': 'models/netP.pth',
      'parallelOpt': 'threadInvariant',
      'pathOpt': 'experimentRelative',
      'folder': 'generated'},
  lossCurve: 'analysis/lossCurve.png',
  errorCurve: 'analysis/errorCurve.png',
  regressorResults: { 'path': 'data/regressorShiftResults.mat',
                      'folder': 'generated'},
  domainShiftCurve: 'analysis/domainShiftTest.png',
  topIms: {'path': 'analysis/topIms.png', 'parallelOpt': 'threadInvariant'},
  botIms: {'path': 'analysis/botIms.png', 'parallelOpt': 'threadInvariant'},
  topDataIms: {'path': 'analysis/topDataIms.png', 'parallelOpt': 'threadInvariant'},
  botDataIms: {'path': 'analysis/botDataIms.png', 'parallelOpt': 'threadInvariant'},
  ganTrainPlot: 'analysis/ganTrainPlot.png',
  ganSampleIms: 'analysis/sample.png'
}
formatArgs: {
  submit: [ 'name', 'NUMBER', 'file:slurmOutFolder', 'file:projectPath' ],
  submit2: [ 'name', 'NUMBER', 'file:slurmOutFolder', 'file:projectPath' ]
}
