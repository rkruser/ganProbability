=====
Starting experiment zipping
ID: 5, PID 6/10
08_01_2018_13:49:29
=====
SampleGAN: Using options {'forward': True, 'samples': 20}
LoadGAN: Using options:
{'ngf': 64, 'nc': 1, 'imageSize': 28, 'manualSeed': None, 'netG': 'netG', 'netGinstance': -1, 'netDexpNum': -1, 'netD': '', 'nz': 20, 'dataset': 'mnist', 'netGexpNum': 1, 'netDinstance': -1, 'ngpu': 1, 'cuda': True, 'beta1': 0.5, 'lr': 0.0002, 'batchSize': 64, 'ndf': 64, 'workers': 2, 'proportions': array([0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1])}
LoadGAN: Generating random seed
LoadGAN: Using random seed 5324
LoadGAN: Load netG from file key netG
LoadGAN: netG structure:
LoadGAN: _netG(
  (main): Sequential(
    (0): ConvTranspose2d(20, 256, kernel_size=(4, 4), stride=(1, 1), bias=False)
    (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True)
    (2): ReLU(inplace)
    (3): ConvTranspose2d(256, 128, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
    (4): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True)
    (5): ReLU(inplace)
    (6): ConvTranspose2d(128, 64, kernel_size=(4, 4), stride=(2, 2), padding=(2, 2), bias=False)
    (7): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True)
    (8): ReLU(inplace)
    (9): ConvTranspose2d(64, 1, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
    (10): Tanh()
  )
)
SampleGAN: Sample 0
SampleGAN: Sample 10
SampleGAN: The minimum value of prob is -24.1590854211 and the maximum is -14.1922487746
SampleGAN: Saving sampled data
ZipSamples: Collapsing to process 0
=====
Starting experiment zipping
ID: 5, PID 6/10
08_01_2018_13:51:50
=====
SampleGAN: Using options {'forward': True, 'samples': 20}
LoadGAN: Using options:
{'ngf': 64, 'nc': 1, 'imageSize': 28, 'manualSeed': None, 'netG': 'netG', 'netGinstance': -1, 'netDexpNum': -1, 'netD': '', 'nz': 20, 'dataset': 'mnist', 'netGexpNum': 1, 'netDinstance': -1, 'ngpu': 1, 'cuda': True, 'beta1': 0.5, 'lr': 0.0002, 'batchSize': 64, 'ndf': 64, 'workers': 2, 'proportions': array([0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1])}
LoadGAN: Generating random seed
LoadGAN: Using random seed 5274
LoadGAN: Load netG from file key netG
LoadGAN: netG structure:
LoadGAN: _netG(
  (main): Sequential(
    (0): ConvTranspose2d(20, 256, kernel_size=(4, 4), stride=(1, 1), bias=False)
    (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True)
    (2): ReLU(inplace)
    (3): ConvTranspose2d(256, 128, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
    (4): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True)
    (5): ReLU(inplace)
    (6): ConvTranspose2d(128, 64, kernel_size=(4, 4), stride=(2, 2), padding=(2, 2), bias=False)
    (7): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True)
    (8): ReLU(inplace)
    (9): ConvTranspose2d(64, 1, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
    (10): Tanh()
  )
)
SampleGAN: Sample 0
SampleGAN: Sample 10
SampleGAN: The minimum value of prob is -25.6602914829 and the maximum is -15.7376859407
SampleGAN: Saving sampled data
ZipSamples: Collapsing to process 0
=====
Starting experiment zipping
ID: 5, PID 6/10
08_01_2018_14:07:24
=====
SampleGAN: Using options {'forward': True, 'samples': 20}
LoadGAN: Using options:
{'ngf': 64, 'nc': 1, 'imageSize': 28, 'manualSeed': None, 'netG': 'netG', 'netGinstance': -1, 'netDexpNum': -1, 'netD': '', 'nz': 20, 'dataset': 'mnist', 'netGexpNum': 1, 'netDinstance': -1, 'ngpu': 1, 'cuda': True, 'beta1': 0.5, 'lr': 0.0002, 'batchSize': 64, 'ndf': 64, 'workers': 2, 'proportions': array([0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1])}
LoadGAN: Generating random seed
LoadGAN: Using random seed 9377
LoadGAN: Load netG from file key netG
LoadGAN: netG structure:
LoadGAN: _netG(
  (main): Sequential(
    (0): ConvTranspose2d(20, 256, kernel_size=(4, 4), stride=(1, 1), bias=False)
    (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True)
    (2): ReLU(inplace)
    (3): ConvTranspose2d(256, 128, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
    (4): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True)
    (5): ReLU(inplace)
    (6): ConvTranspose2d(128, 64, kernel_size=(4, 4), stride=(2, 2), padding=(2, 2), bias=False)
    (7): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True)
    (8): ReLU(inplace)
    (9): ConvTranspose2d(64, 1, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
    (10): Tanh()
  )
)
SampleGAN: Sample 0
SampleGAN: Sample 10
SampleGAN: The minimum value of prob is -25.1182586199 and the maximum is -13.8407195555
SampleGAN: Saving sampled data
ZipSamples: Collapsing to process 0
=====
Starting experiment zipping
ID: 5, PID 6/10
08_01_2018_14:17:21
=====
SampleGAN: Using options {'forward': True, 'samples': 20}
LoadGAN: Using options:
{'ngf': 64, 'nc': 1, 'imageSize': 28, 'manualSeed': None, 'netG': 'netG', 'netGinstance': -1, 'netDexpNum': -1, 'netD': '', 'nz': 20, 'dataset': 'mnist', 'netGexpNum': 1, 'netDinstance': -1, 'ngpu': 1, 'cuda': True, 'beta1': 0.5, 'lr': 0.0002, 'batchSize': 64, 'ndf': 64, 'workers': 2, 'proportions': array([0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1])}
LoadGAN: Generating random seed
LoadGAN: Using random seed 2946
LoadGAN: Load netG from file key netG
LoadGAN: netG structure:
LoadGAN: _netG(
  (main): Sequential(
    (0): ConvTranspose2d(20, 256, kernel_size=(4, 4), stride=(1, 1), bias=False)
    (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True)
    (2): ReLU(inplace)
    (3): ConvTranspose2d(256, 128, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
    (4): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True)
    (5): ReLU(inplace)
    (6): ConvTranspose2d(128, 64, kernel_size=(4, 4), stride=(2, 2), padding=(2, 2), bias=False)
    (7): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True)
    (8): ReLU(inplace)
    (9): ConvTranspose2d(64, 1, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
    (10): Tanh()
  )
)
SampleGAN: Sample 0
SampleGAN: Sample 10
SampleGAN: The minimum value of prob is -25.1541119024 and the maximum is -16.0733479334
SampleGAN: Saving sampled data
ZipSamples: Collapsing to process 0
=====
Starting experiment zipping
ID: 5, PID 6/10
08_01_2018_14:19:05
=====
SampleGAN: Using options {'forward': True, 'samples': 20}
LoadGAN: Using options:
{'ngf': 64, 'nc': 1, 'imageSize': 28, 'manualSeed': None, 'netG': 'netG', 'netGinstance': -1, 'netDexpNum': -1, 'netD': '', 'nz': 20, 'dataset': 'mnist', 'netGexpNum': 1, 'netDinstance': -1, 'ngpu': 1, 'cuda': True, 'beta1': 0.5, 'lr': 0.0002, 'batchSize': 64, 'ndf': 64, 'workers': 2, 'proportions': array([0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1])}
LoadGAN: Generating random seed
LoadGAN: Using random seed 3501
LoadGAN: Load netG from file key netG
LoadGAN: netG structure:
LoadGAN: _netG(
  (main): Sequential(
    (0): ConvTranspose2d(20, 256, kernel_size=(4, 4), stride=(1, 1), bias=False)
    (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True)
    (2): ReLU(inplace)
    (3): ConvTranspose2d(256, 128, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
    (4): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True)
    (5): ReLU(inplace)
    (6): ConvTranspose2d(128, 64, kernel_size=(4, 4), stride=(2, 2), padding=(2, 2), bias=False)
    (7): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True)
    (8): ReLU(inplace)
    (9): ConvTranspose2d(64, 1, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
    (10): Tanh()
  )
)
SampleGAN: Sample 0
SampleGAN: Sample 10
SampleGAN: The minimum value of prob is -24.5613181935 and the maximum is -10.2260139345
SampleGAN: Saving sampled data
ZipSamples: Collapsing to process 0
=====
Starting experiment zipping
ID: 5, PID 6/10
08_01_2018_14:32:04
=====
SampleGAN: Using options {'forward': True, 'samples': 20}
LoadGAN: Using options:
{'ngf': 64, 'nc': 1, 'imageSize': 28, 'manualSeed': None, 'netG': 'netG', 'netGinstance': -1, 'netDexpNum': -1, 'netD': '', 'nz': 20, 'dataset': 'mnist', 'netGexpNum': 1, 'netDinstance': -1, 'ngpu': 1, 'cuda': True, 'beta1': 0.5, 'lr': 0.0002, 'batchSize': 64, 'ndf': 64, 'workers': 2, 'proportions': array([0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1])}
LoadGAN: Generating random seed
LoadGAN: Using random seed 8975
LoadGAN: Load netG from file key netG
LoadGAN: netG structure:
LoadGAN: _netG(
  (main): Sequential(
    (0): ConvTranspose2d(20, 256, kernel_size=(4, 4), stride=(1, 1), bias=False)
    (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True)
    (2): ReLU(inplace)
    (3): ConvTranspose2d(256, 128, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
    (4): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True)
    (5): ReLU(inplace)
    (6): ConvTranspose2d(128, 64, kernel_size=(4, 4), stride=(2, 2), padding=(2, 2), bias=False)
    (7): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True)
    (8): ReLU(inplace)
    (9): ConvTranspose2d(64, 1, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
    (10): Tanh()
  )
)
SampleGAN: Sample 0
SampleGAN: Sample 10
SampleGAN: The minimum value of prob is -25.1120924945 and the maximum is -17.4225329287
SampleGAN: Saving sampled data
ZipSamples: Collapsing to process 0
